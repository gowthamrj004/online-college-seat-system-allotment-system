/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SignUp;

import java.sql.Connection;
import java.sql.DriverManager;
import java.util.List;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Timer;
import java.util.TimerTask;
import java.time.LocalDate;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**AutoAllocation.startAllocation()
 *
 * @author GOWTHAM RJ
 */
public class choices extends javax.swing.JFrame {
    private DefaultListModel<String> listModel;
    private String userUID;
    /**
     * Creates new form choices
     * @param UID
     */
    
   public choices(String UID) {
    this.userUID = UID; 
    initComponents(); 
    initializeLogic(); 
    
    }
    private void initializeLogic() {
    listModel = new DefaultListModel<>();
    jList2.setModel(listModel);
    jList2.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION); 
    jList2.addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting()) { 
            loadTableForBranchIds(); 
        }
    });
    yourMethod(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel3.setText("Engineering seat allotment");

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel1.setText("Enter the choice:");

        jList2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Branch id", "college name", "Branch name"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jButton1.setText("Add Colleges");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jButton2.setText("Back");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(171, 171, 171))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(58, 58, 58)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void yourMethod() {    
    try {
        String query;
        String surl = "jdbc:MySQL://localhost:3306/list_of_colleges";
        String suse = "root";
        String spass = "Prema@1977";
        java.sql.Connection con = java.sql.DriverManager.getConnection(surl, suse, spass);
        query = "SELECT Branch_id FROM list_of_college";
        PreparedStatement pst = con.prepareStatement(query);
        ResultSet rs = pst.executeQuery();
        if (listModel != null) {
            listModel.clear();
        } else {
            System.out.println("listModel is null in yourMethod()!");
        }
        while (rs.next()) {
            String B_id = String.valueOf(rs.getInt("Branch_id"));
            System.out.println("Adding Branch ID: " + B_id); 
            listModel.addElement(B_id);  
        }
        con.close();
    } catch (Exception e) {
        System.out.println("Error: " + e.getMessage());  
    }
}

   private void loadTableForBranchIds() {
    DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
    List<String> selectedBranchIds = jList2.getSelectedValuesList();
    
    if (selectedBranchIds.isEmpty()) {
        System.out.println("No branch selected.");
        return; 
    }

    try {
        String query;
        String surl, suse, spass;
        Class.forName("com.mysql.cj.jdbc.Driver");
        surl = "jdbc:MySQL://localhost:3306/list_of_colleges";
        suse = "root";
        spass = "Prema@1977";
        java.sql.Connection con = java.sql.DriverManager.getConnection(surl, suse, spass);
        
        query = "SELECT * FROM list_of_college WHERE Branch_id = ?";
        PreparedStatement pst = con.prepareStatement(query);
        for (String branchId : selectedBranchIds) {
            pst.setInt(1, Integer.parseInt(branchId));
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                String B_id = String.valueOf(rs.getInt("Branch_id"));
                String c_name = rs.getString("college_name");
                String B_name = rs.getString("branch_name");
                boolean exists = false;
                for (int i = 0; i < tableModel.getRowCount(); i++) {
                    if (tableModel.getValueAt(i, 0).equals(B_id)) {
                        exists = true;
                        break;
                    }
                }
                if (!exists) {
                    tableModel.addRow(new Object[]{B_id, c_name, B_name});
                }
            }
        }
        con.close();
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
}





    private void jList2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList2KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jList2KeyPressed




    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    if (!isBeforeDeadline(userUID)) {
    JOptionPane.showMessageDialog(this, "The deadline to submit choices has passed.");
    return;
    }
    if (userUID == null || userUID.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "UID is not provided. Please try again.");
        return;
    }

    if (jTable1.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "No branches displayed in the table to save.");
        return;
    }

    try {
        String SUrl = "jdbc:MySQL://localhost:3306/list_of_colleges";
        String SUser = "root";
        String SPass = "Prema@1977";

        try (Connection con = java.sql.DriverManager.getConnection(SUrl, SUser, SPass)) {
            String userQuery = "SELECT * FROM users WHERE TRIM(UID) = ?";
            try (PreparedStatement userPst = con.prepareStatement(userQuery)) {
                userPst.setString(1, userUID.trim());
                try (ResultSet rsUser = userPst.executeQuery()) {
                    if (rsUser.next()) {
                        int UID = rsUser.getInt("UID");
                        String userName = rsUser.getString("fname");
                        String tableName = "user_choiceUID_" + UID;
                        String createTableQuery = "CREATE TABLE IF NOT EXISTS " + tableName + " ("
                                +"choice_id INT AUTO_INCREMENT ,"
                                + "UID INT, "
                                + "userName VARCHAR(50), "
                                + "branch_id INT NOT NULL, "
                                + "college_name VARCHAR(255), "
                                + "branch_name VARCHAR(255),"
                                + "PRIMARY KEY (choice_id))";
                        try (PreparedStatement createTablePst = con.prepareStatement(createTableQuery)) {
                            createTablePst.executeUpdate();
                        }
                        String insertQuery = "INSERT INTO " + tableName
                                + " (UID, userName, branch_id, college_name, branch_name) VALUES (?, ?, ?, ?, ?)";
                        try (PreparedStatement insertPst = con.prepareStatement(insertQuery)) {
                            for (int row = 0; row < jTable1.getRowCount(); row++) {
                                int branchId = Integer.parseInt(jTable1.getValueAt(row, 0).toString());
                                String collegeName = jTable1.getValueAt(row, 1).toString();
                                String branchName = jTable1.getValueAt(row, 2).toString();
                                insertPst.setInt(1, UID);
                                insertPst.setString(2, userName);
                                insertPst.setInt(3, branchId);
                                insertPst.setString(4, collegeName);
                                insertPst.setString(5, branchName);
                                insertPst.addBatch();
                            }

                            insertPst.executeBatch();
                        }

                        JOptionPane.showMessageDialog(this, "Choices submitted successfully.Result will be announced on 20 DEC");
                        AutoAllocation.startAllocation();
                        new Home().setVisible(true);
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(this, "User not found.");
                    }
                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage());
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Invalid data format in the table. Please check the data.");
    }
    
   

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(choices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }    
        //</editor-fold>
    String userUID = "sampleUID";
    java.awt.EventQueue.invokeLater(() ->{
        choices userChoices=new choices(userUID);
        userChoices.setVisible(true);
        userChoices.yourMethod();
    });
    Timer timer = new Timer();
    try {
        Timestamp deadline = getDeadline(); 
        if (deadline != null) {
            long currentTime = System.currentTimeMillis();
            long deadlineTime = deadline.getTime();
            long delay = deadlineTime - currentTime;

            if (delay > 0) {
                System.out.println("Scheduling allocation after the deadline. Delay: " + delay + " ms");
                timer.schedule(new TimerTask() {
                    @Override
                    public void run() {
                        System.out.println("Running automatic allocation...");
                        AutoAllocation.startAllocation();
                    }
                }, delay);
            } else {
                System.out.println("Deadline has already passed. Running allocation immediately.");
                AutoAllocation.startAllocation();
            }
        } else {
            System.out.println("No deadline found. Allocation will not be scheduled.");
        }
    } catch (Exception ex) {
        System.out.println("Error while scheduling allocation: " + ex.getMessage());
        ex.printStackTrace();
    }
    }
private static Timestamp getDeadline() {
    String surl = "jdbc:MySQL://localhost:3306/list_of_colleges";
    String suse = "root";
    String spass = "Prema@1977";
    String query = "SELECT MAX(deadline) AS latest_deadline FROM deadlines";

    try (Connection con = DriverManager.getConnection(surl, suse, spass);
         PreparedStatement pst = con.prepareStatement(query);
         ResultSet rs = pst.executeQuery()) {
        if (rs.next()) {
            Timestamp deadline = rs.getTimestamp("latest_deadline");
            return deadline;
        } else {
            System.out.println("No deadline found."); 
        }
    } catch (SQLException ex) {
        System.out.println("Database connection error while retrieving deadline: " + ex.getMessage());
        ex.printStackTrace();
    }
    return null; 
}

private static boolean isBeforeDeadline(String userUID) {
    String surl = "jdbc:MySQL://localhost:3306/list_of_colleges";
    String suse = "root";
    String spass = "Prema@1977";
    String query = "SELECT deadline FROM deadlines WHERE TRIM(uid) = ?";

    try (Connection con = DriverManager.getConnection(surl, suse, spass);
         PreparedStatement pst = con.prepareStatement(query)) {
        pst.setString(1, userUID.trim());
        try (ResultSet rs = pst.executeQuery()) {
            if (rs.next()) {
                Timestamp deadline = rs.getTimestamp("deadline");
                System.out.println("Deadline for user " + userUID + ": " + deadline);
                boolean beforeDeadline = new Date().before(deadline);
                System.out.println("Is before deadline: " + beforeDeadline);
                return beforeDeadline;
            }
        }
    } catch (SQLException ex) {
        System.out.println("Database connection error: " + ex.getMessage());
        ex.printStackTrace();
    }
    return false; 
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
